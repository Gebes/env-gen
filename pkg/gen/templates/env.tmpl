{{/* The line below tells Intellij/GoLand to enable the autocompletion based on the *gen.Data type. */}}
{{/* gotype: github.com/Gebes/env-gen/pkg/gen.Data */}}

package {{ $.Config.PackageName }}

import (
   {{ if $.Config.GodotEnvEnabled}} "github.com/joho/godotenv"{{end}}
    "log"
    "os"
    "strconv"
)

var (
{{- range $f := $.Fields }}
    {{ $f.CodeName }} {{ $f.Type }}
{{- end }}
)

func init() {
    {{ if $.Config.GodotEnvEnabled}}{{ if $.Config.GodotEnvLoggingEnabled}}
	err := godotenv.Load()
    if err != nil {
        log.Println("Could not load .env file:", err)
    }{{end}}{{ if not $.Config.GodotEnvLoggingEnabled}}
    _ = godotenv.Load()
    {{end}}
    {{end}}

    {{ $needsError := (or $.Config.ExitOnParseError $.Config.LogParseError) }}
    {{ $log := $.Config.LogParseError }}
	{{ if and (or (not $.Config.GodotEnvEnabled) (not $.Config.GodotEnvLoggingEnabled)) $needsError }}
	var err error{{end}}

    {{ if $.Config.ExitOnParseError }}hasError := false{{ end }}

    {{- range $f := $.Fields }}{{ if eq $f.Type "string"}}
    {{ $f.CodeName }} = os.Getenv("{{ $f.EnvName }}"){{ end }}{{ if eq $f.Type "int" }}
    {{ $f.CodeName }}, {{ if $needsError }}err{{end}}{{if not $needsError}}_{{end}} = strconv.Atoi(os.Getenv("{{ $f.EnvName }}"))
    {{if $needsError}}if err != nil {
        {{ if $.Config.ExitOnParseError }}hasError = true
        {{ end }}{{if $log }}log.Println("Could not parse variable {{$f.EnvName}} to a int from the environment:", err){{end}}
    }{{ end }}{{end}}{{  if eq $f.Type "bool" }}
    {{ $f.CodeName }}, {{ if $needsError }}err{{end}}{{if not $needsError}}_{{end}} = strconv.ParseBool(os.Getenv("{{ $f.EnvName }}"))
    {{if $needsError}}if err != nil {
        {{ if $.Config.ExitOnParseError }}hasError = true
        {{ end }}{{if $log }}log.Println("Could not parse variable {{$f.EnvName}} to a bool from the environment:", err){{end}}
    }{{ end }}{{end}}
    {{- end }}
    {{ if $.Config.ExitOnParseError }}
    if hasError {
        os.Exit(1)
    }{{ end }}
}